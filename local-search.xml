<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring笔记</title>
    <link href="/2020/02/27/Spring%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/02/27/Spring%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><ol><li>Spring是非入侵式框架，基于Interface21框架；IOC+AOP+事物处理</li><li>控制反转(IOC)：对象的创建与对象间的依赖关系完全硬编码在程序中并由程序自己控制，而控制反转则将控制权转移给第三方； 可以利用依赖注入(DI)实现</li><li>有XML和注解两种实现IOC</li><li>XML：</li></ol><ul><li>使用Spring来创建对象，在Spring中都称为bean</li><li>在bean中来实现对象的属性赋值</li><li>这种情况下，程序不用new对象，只需要被动接受Spring容器创建好的对象</li><li>一句话：对象由Spring创建，管理，装配</li></ul><ol start="5"><li>接上：</li></ol><ul><li>bean中的property基本类型用value，引用类型用ref;其中property必须搭配Set方法使用</li><li>property的name是xxx,则方法为setXxx,例如property的name=”te”,那么对应类中需要setTe(Object ob)方法,命名规范严格遵照驼峰规则</li></ul><ol start="6"><li>IOC对象创建</li></ol><ul><li>无参构造函数</li><li>有参构造函数：可以使用多种方式在配置文件中赋值没具体查阅Spring文档</li></ul><ol start="7"><li>当使用ClassPathXMLApplication(“bean.xml”)即配置文件加载后，只要beans.xml中配置了bean,即使没有调用，也会创建对象，可以使用无参构造函数测试这种情况，且一个beans在容器中只创建了一个</li></ol><h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><p>8. </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>图片问题</title>
    <link href="/2020/02/27/%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/"/>
    <url>/2020/02/27/%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>今日问题</p><h2 id="外链图片加载失败"><a href="#外链图片加载失败" class="headerlink" title="外链图片加载失败"></a>外链图片加载失败</h2><h3 id="问题来源"><a href="#问题来源" class="headerlink" title="问题来源"></a>问题来源</h3><ol><li>可能是由于服务器检测到请求头中的refer不是自家域名，为了减轻服务器压力，拦截访问</li></ol><ul><li>学习资料： <a href="https://blog.csdn.net/qq_42248939/article/details/97377126" target="_blank" rel="noopener">https://blog.csdn.net/qq_42248939/article/details/97377126</a></li></ul><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li>下载到本地访问</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java笔记</title>
    <link href="/2020/02/26/Java%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/02/26/Java%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>Java新手上路，前方慢行，谨以此记录自己的第一个博客笔记</p><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h2><ol><li>Public类的名字与文件名一致</li><li>类的构造器(默认存在且其权限修饰符与所属类一致，也可以自己编写)，父类构造器不能被子类继承</li><li>可变个数的参数：如public void test (String…args){}</li><li>四种访问权限修饰符：private(类内部使用),default(类内部+包）,protected(类内部+包+子类),public(任何地方)</li></ol><h2 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h2><ol start="5"><li>关键字this：当前正在引用的对象或者当前正在初始化的对象，this(…..)可用来调用构造器<br>要求：</li></ol><ul><li>必须存在未使用this()调用的构造器  </li><li>this()调用要放在首行)。若本类没有则在父类查找</li></ul><ol start="6"><li>JavaBean:拥有Set和Get方法的公共类且属性私有，一种可重用组件</li><li>类的继承只能有一个父类(单继承)，若对继承类方法重写，权限限定比原方法严格（如原方法是public,重写后的方法就是public而不能是protected）</li></ol><h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><ol start="8"><li>Super用于调用父类中的指定操作，不局限于直接父类，还可以对多层继承父类调用，且Super调用写在第一行</li><li>子类要调用父类构造器，默认调用父类无参构造器。若父类没有无参构造器，则自需要手动调用，</li><li>Super和this调用构造器只能使用其中一个，因为两者都要求占据第一行</li><li>子对象实例化过程：</li></ol><ul><li>先加载父类字节码，在加载子类字节码. </li><li>在堆内存中开辟空间并分配地址，默认初始化. </li><li>子类构造函数进栈，显式初始化父类属性. 四、父类构造方法进栈，显式初始化子类属性，执行完后父类构造方法出栈<br>五、显式初始化子类属性，返回地址给引用变量，子类构造方法出栈.</li></ul><h2 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h2><ol start="12"><li>多态存在的三个必要条件：继承，重写，父类引用指向子类对象(例如:student继承person类，student中重写了person的show方法，{person e = new student();e.show()动态绑定，最终输出的是子类student中的show})。方法形参为父类，可以传参时传入子类，调用参数的方法时会用到多态</li><li>Instanceof操作符：x instanceof A：检验对象x是否是类A的对象，返回值为boolean(若x instanceof A为true,x instanceof A的父类,也为true)</li><li>==：基本类型比较是值等则为true，引用类型比较则是指向同一个对象才返回true；equals()当比较例如String类是比较String的值相同则为true，而不是比较是否指向同一个对象</li><li>包装类：boolean b=new Boolean(“true”)这是自动拆箱，Boolean b=true这是自动装箱，都是在JDK1.5后支持。包装类方便基本类型与字符串的转换</li><li>System.out.println(x)//若X是对象，则相当于输出x.toString().</li><li>用static修饰的方法和变量可以直接用(类名.方法)调用，随着类的加载而加载，被所有对象共享</li><li>单例模式：用static创建变量，进行一次实例化，共同使用，分为1.饿汉式 2.懒汉式(两者区别，饿汉式在类实例化时就创建，懒汉式在调用getInstance()方法时才创建)</li><li>代码块先于构造器初始化,静态代码块值执行一次</li><li>匿名内部类用于隐式继承父类或实现接口，可以在匿名内部类中用代码块初始化</li><li>Final修饰的类不能被继承，final修饰的变量不能被修改且必须显示赋值，final修饰的方法不能被子类重写</li></ol><h2 id="第五天"><a href="#第五天" class="headerlink" title="第五天"></a>第五天</h2><ol start="22"><li>Abstract修饰抽象方法和抽象类，抽象类不能实例化，但可以由构造器，继承抽象类的子类必须重写抽象类中的抽象方法，抽象方法是只有声明没有实现。若某类中有抽象方法，则该类必须声明为抽象类</li><li>模板设计模式：定义一个抽象类，定义一个抽象类，子类继承抽象类，可以直接使用而不用重写部分已经写好的通用方法。</li><li>接口与抽象类的区别：</li></ol><ul><li>接口中（默认public abstract） 只能声明方法而不能实现方法2.接口中的变量只能是public static final类型的</li><li>接口不能含有静态代码块、静态方法以及构造器 4.一个类只能继承一个抽象类，但是却可以实现多个接口</li></ul><ol start="25"><li>工厂模式：</li></ol><ul><li>定义接口，将实现同一接口的不同类放入工厂，并延迟到子类再决定实例化哪一个类。  </li><li>定义一个产品接口 2.创建多个实现接口的不同实体类</li><li>创建一个工厂，基于开发者对实体类的需求返回类</li></ul><ol start="26"><li>内部类也是类，但特殊点在若内部类是static修饰，就不能使用外部类的非static的成员变量。而非static的内部类中的成员不能声明为static（内部类主要用来解决JAVA不能多层继承的问题）</li><li>异常问题，子类不能抛出比父类更大范围的异常</li><li>Java分为三大集合：</li></ol><ul><li>Set,Map,List</li><li>set和list使用iterator或者foreach迭代</li></ul><ol start="29"><li>treeSet有序，treeMap有序</li><li>Map使用keySet或者entrySet遍历</li><li>Collections工具</li></ol><h2 id="第六天"><a href="#第六天" class="headerlink" title="第六天"></a>第六天</h2><ol start="32"><li>泛型：</li></ol><ul><li>泛型类；</li><li>泛型接口：实现泛型接口时如果不具体指定类型，则实现类也需要加上泛型（例如class A<T> implements interfa<T>）；</li><li>泛型方法：public <T> void test(T t){}。在静态方法中不能使用类定义泛型，若需要使用，只能使用静态方法自己定义的泛型public static <T> void test(T t){}</li></ul><ol start="33"><li>通配符是“？”：</li></ol><ul><li>&lt;? extends Person&gt;表示通配只接受Person及其子类的引用</li><li>&lt;? super Person&gt;表示通配只接受Person及其父类的引用</li><li>&lt;？Extends Comparable&gt;表示通配只接受实现Comparable接口的类的引用</li></ul><ol start="34"><li>枚举类：<br>Season summer = Season.SUMMER;<br>Summer.showInfo();<br>每个枚举都是单例模式</li><li>注解：编写注解需要使用@interface声明，在注解前面也需要加其他注解来限制编写的注解的作用范围：如下</li><li>文件流：File类：其中，File.separator为当前系统分隔符，File只能操作文件本身，比如删除文件，但不能改变文件的内容</li><li>文件流：FileOutputStream输出流（字节流），将数据输出到某文件，FileInputStream输入流（字节流），从某文件中获取数据输入（可用byte数组存储）。FileReader输入流（字符流，可以char数组存储）</li><li>缓冲流：先将数据放入内存中，再在内存中操作数据，提升性能。BufferedInputStream和BufferedOutputStream</li><li>转换流：InputStreamReader等等。。不同文本格式的转换，比如GBK到UTB-8</li><li>标准输入输出流</li><li>对象流：序列化和反序列化（包名，类名等要完全一致）</li><li>反射机制：前提是JVM已经加载过这个类<br>反射机制中的Class代表该字节码文件，Class类是JVM创建的表类信息的类，而Object是所有类的父类，可以利用Class.class.isAssignableFrom(Object.class)来判断子类父类关系<br>可以利用反射机制调用类的私有方法和私有变量（这类操作会破坏类的封装性）</li><li>Java动态代理：当需要修改方法执行前或执行后的操作时，利用动态代理可以简化操作，想要通过Proxy.newProxyInstance方法被代理则此对象的类需要实现接口<br>JDK实现：</li></ol><ul><li>自己定义的接口 </li><li>实现这个接口 </li><li>实现InvocationHandler接口  4.利用第三步中的类获取代理类，调用方法（JVM会自动生成Proxy类文件，调用InvocationHandler接口中实现Invoke方法达到最终目的）</li></ul><ol start="44"><li>Java静态代理和动态代理讲解：</li></ol><ul><li><a href="https://www.jianshu.com/p/9bcac608c714" target="_blank" rel="noopener">https://www.jianshu.com/p/9bcac608c714</a></li><li><a href="https://www.bilibili.com/video/av63885236" target="_blank" rel="noopener">https://www.bilibili.com/video/av63885236</a></li></ul><ol start="45"><li>创建线程：</li></ol><ul><li>继承thread类  </li><li>实现Runnable接口</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的博客</title>
    <link href="/2020/02/25/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/2020/02/25/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>博客测试</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/02/25/hello-world/"/>
    <url>/2020/02/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
